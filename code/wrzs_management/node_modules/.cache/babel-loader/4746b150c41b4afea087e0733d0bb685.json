{"remainingRequest":"D:\\coding\\wrzs\\wrzs_management\\node_modules\\thread-loader\\dist\\cjs.js!D:\\coding\\wrzs\\wrzs_management\\node_modules\\babel-loader\\lib\\index.js!D:\\coding\\wrzs\\wrzs_management\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\coding\\wrzs\\wrzs_management\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\coding\\wrzs\\wrzs_management\\src\\views\\discount-manage\\coupon-manage\\coupon-manage-index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\coding\\wrzs\\wrzs_management\\src\\views\\discount-manage\\coupon-manage\\coupon-manage-index.vue","mtime":1686935590699},{"path":"D:\\coding\\wrzs\\wrzs_management\\babel.config.js","mtime":1686935590651},{"path":"D:\\coding\\wrzs\\wrzs_management\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686936146269},{"path":"D:\\coding\\wrzs\\wrzs_management\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686936146253},{"path":"D:\\coding\\wrzs\\wrzs_management\\node_modules\\babel-loader\\lib\\index.js","mtime":1686936146329},{"path":"D:\\coding\\wrzs\\wrzs_management\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686936146269},{"path":"D:\\coding\\wrzs\\wrzs_management\\node_modules\\vue-loader\\lib\\index.js","mtime":1686936145262}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}