{"remainingRequest":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\thread-loader\\dist\\cjs.js!D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\babel-loader\\lib\\index.js!D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\coding\\wrzs\\wrzs_storemanagement\\src\\views\\store-manage\\room-manage\\room-manage-index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\src\\views\\store-manage\\room-manage\\room-manage-index.vue","mtime":1686935646983},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\babel.config.js","mtime":1686935646926},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686936409160},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686936409160},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\babel-loader\\lib\\index.js","mtime":1686936409992},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686936409160},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\vue-loader\\lib\\index.js","mtime":1686936410308}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiRDovY29kaW5nL3dyenMvd3J6c19zdG9yZW1hbmFnZW1lbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3JlZ2VuZXJhdG9yUnVudGltZS5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJEOi9jb2Rpbmcvd3J6cy93cnpzX3N0b3JlbWFuYWdlbWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIkQ6L2NvZGluZy93cnpzL3dyenNfc3RvcmVtYW5hZ2VtZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCgppbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gInZ1ZXgiOwppbXBvcnQgeyBnZXRSb29tTGlzdCBhcyBfZ2V0Um9vbUxpc3QsIGVkaXRSb29tU3RhdHVzLCBlZGl0Um9vbVNvcnQsIGVkaXRSb29tT25TdGF0dXMsIGVkaXRSb29tT2ZmU3RhdHVzLCBlZGl0Um9vbVNldHRsU3RhdHVzLCBkZWxSb29tIGFzIF9kZWxSb29tLCBjb3B5Um9vbSBhcyBfY29weVJvb20sIGVkaXRSb29tQ2FuY2VsU3RhdHVzIH0gZnJvbSAiQC9hcGkvc3RvcmUtbWFuYWdlL3Jvb20tbWFuYWdlIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJyb29tLW1hbmFnZS1pbmRleCIsCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoe30sIG1hcFN0YXRlKHsKICAgIHN0b3JlTWFuYWdlOiBmdW5jdGlvbiBzdG9yZU1hbmFnZShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGVbJ3N0b3JlLW1hbmFnZS9zdG9yZS1tYW5hZ2UnXS5zdG9yZU1hbmFnZTsKICAgIH0KICB9KSksCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHRhYmxlRGF0YTogewogICAgICAgIHB1YmxpYzogJycsCiAgICAgICAgc3RhdHVzOiAnJwogICAgICB9CiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgLy8g6Ieq5Yqo6YCa55S1CiAgICBjaGFuZ2VPblN0YXR1czogZnVuY3Rpb24gY2hhbmdlT25TdGF0dXMocm93KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGVkaXRSb29tT25TdGF0dXMoewogICAgICAgICAgICAgICAgcm9vbV9pZDogcm93LnJvb21faWQsCiAgICAgICAgICAgICAgICBzdGF0dXM6IHJvdy5lbGVjdHJpY19zdGF0dXMKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIF90aGlzLiRtZXNzYWdlLnN1Y2Nlc3MoJ+S/ruaUueaIkOWKnycpOwogICAgICAgICAgICAgICAgX3RoaXMuZ2V0Um9vbUxpc3QoKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOiHquWKqOWFs+eUtQogICAgY2hhbmdlT2ZmU3RhdHVzOiBmdW5jdGlvbiBjaGFuZ2VPZmZTdGF0dXMocm93KSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBlZGl0Um9vbU9mZlN0YXR1cyh7CiAgICAgICAgICAgICAgICByb29tX2lkOiByb3cucm9vbV9pZCwKICAgICAgICAgICAgICAgIHN0YXR1czogcm93LmVsZWN0cmljX3N0b3Bfc3RhdHVzCiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBfdGhpczIuJG1lc3NhZ2Uuc3VjY2Vzcygn5L+u5pS55oiQ5YqfJyk7CiAgICAgICAgICAgICAgICBfdGhpczIuZ2V0Um9vbUxpc3QoKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g6L+U5Zue5LiK5LiA6aG1CiAgICBiYWNrOiBmdW5jdGlvbiBiYWNrKCkgewogICAgICB0aGlzLiRlbWl0KCdiYWNrJywgJ2luZGV4Jyk7CiAgICB9LAogICAgLy8g5aSN5Yi25oi/6Ze0CiAgICBjb3B5Um9vbTogZnVuY3Rpb24gY29weVJvb20ocm9vbV9pZCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gX2NvcHlSb29tKHsKICAgICAgICAgICAgICAgIHJvb21faWQ6IHJvb21faWQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIF90aGlzMy4kbWVzc2FnZS5zdWNjZXNzKCflpI3liLbmiJDlip8nKTsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5nZXRSb29tTGlzdCgpOwogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDojrflj5bmiL/pl7TliJfooagKICAgIGdldFJvb21MaXN0OiBmdW5jdGlvbiBnZXRSb29tTGlzdCgpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfdGhpczQuJHJlZnMudGFibGUuY2xlYXJGaWx0ZXIoKTsKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIF9nZXRSb29tTGlzdCh7CiAgICAgICAgICAgICAgICBwYWdlOiBfdGhpczQuTWl4X3RhYmxlRGF0YS5jdXJyZW50UGFnZSwKICAgICAgICAgICAgICAgIGxpbWl0OiBfdGhpczQuTWl4X3RhYmxlRGF0YS5wYWdlU2l6ZSwKICAgICAgICAgICAgICAgIHN0YXR1czogX3RoaXM0LnRhYmxlRGF0YS5zdGF0dXMsCiAgICAgICAgICAgICAgICBwdWJsaWM6IF90aGlzNC50YWJsZURhdGEucHVibGljLAogICAgICAgICAgICAgICAgc3RvcmVfaWQ6IF90aGlzNC5zdG9yZU1hbmFnZS5zdG9yZV9pZAogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgIF90aGlzNC5NaXhfdGFibGVEYXRhLmxpc3QgPSBkYXRhLmxpc3Q7CiAgICAgICAgICAgICAgICBfdGhpczQuTWl4X3RhYmxlRGF0YS50b3RhbCA9IGRhdGEuY291bnQ7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOaIv+mXtOaOkuW6jwogICAgY2hhbmdlU29ydDogZnVuY3Rpb24gY2hhbmdlU29ydChyb3dzKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBlZGl0Um9vbVNvcnQoewogICAgICAgICAgICAgICAgcm9vbV9pZDogcm93cy5yb29tX2lkLAogICAgICAgICAgICAgICAgc29ydDogcm93cy5zb3J0CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBfdGhpczUuJG1lc3NhZ2Uuc3VjY2Vzcygn5L+u5pS55oiQ5YqfJyk7CiAgICAgICAgICAgICAgICBfdGhpczUuZ2V0Um9vbUxpc3QoKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g5p+l6K+iCiAgICBzZWFyY2hTdWJtaXQ6IGZ1bmN0aW9uIHNlYXJjaFN1Ym1pdCgpIHsKICAgICAgdGhpcy5NaXhfdGFibGVEYXRhLmN1cnJlbnRQYWdlID0gMTsKICAgICAgdGhpcy5nZXRSb29tTGlzdCgpOwogICAgfSwKICAgIC8vIOe7k+eul+WKn+iDveaUueWPmOS6i+S7tgogICAgY2hhbmdlU2V0dGxTdGF0dXM6IGZ1bmN0aW9uIGNoYW5nZVNldHRsU3RhdHVzKHJvdykgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gZWRpdFJvb21TZXR0bFN0YXR1cyh7CiAgICAgICAgICAgICAgICByb29tX2lkOiByb3cucm9vbV9pZCwKICAgICAgICAgICAgICAgIHNldHRsZW1lbnRfc3RhdHVzOiByb3cuc2V0dGxlbWVudF9zdGF0dXMKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIF90aGlzNi4kbWVzc2FnZS5zdWNjZXNzKCfkv67mlLnmiJDlip8nKTsKICAgICAgICAgICAgICAgIF90aGlzNi5nZXRSb29tTGlzdCgpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDnlKjmiLflj6/lkKblj5bmtojor6XmiL/pl7QKICAgIGNoYW5nZUNhbmNlbFN0YXR1czogZnVuY3Rpb24gY2hhbmdlQ2FuY2VsU3RhdHVzKHJvdykgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gZWRpdFJvb21DYW5jZWxTdGF0dXMoewogICAgICAgICAgICAgICAgcm9vbV9pZDogcm93LnJvb21faWQsCiAgICAgICAgICAgICAgICBjYW5jZWxfc3RhdHVzOiByb3cuY2FuY2VsX3N0YXR1cwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgX3RoaXM3LiRtZXNzYWdlLnN1Y2Nlc3MoJ+S/ruaUueaIkOWKnycpOwogICAgICAgICAgICAgICAgX3RoaXM3LmdldFJvb21MaXN0KCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOaUueWPmOaIv+mXtOeKtuaAgQogICAgY2hhbmdlU3RhdHVzOiBmdW5jdGlvbiBjaGFuZ2VTdGF0dXMocm93KSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlOCgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OCkgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBlZGl0Um9vbVN0YXR1cyh7CiAgICAgICAgICAgICAgICByb29tX2lkOiByb3cucm9vbV9pZCwKICAgICAgICAgICAgICAgIHN0YXR1czogcm93LnN0YXR1cwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgX3RoaXM4LiRtZXNzYWdlLnN1Y2Nlc3MoJ+S/ruaUueaIkOWKnycpOwogICAgICAgICAgICAgICAgX3RoaXM4LmdldFJvb21MaXN0KCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlOCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOmHjee9ruaVsOaNrgogICAgcmVzZXREYXRhOiBmdW5jdGlvbiByZXNldERhdGEoKSB7CiAgICAgIHRoaXMudGFibGVEYXRhLnN0YXR1cyA9ICcnOwogICAgICB0aGlzLnRhYmxlRGF0YS5wdWJsaWMgPSAnJzsKICAgIH0sCiAgICAvLyDmt7vliqDmiL/pl7QKICAgIGFkZFJvb206IGZ1bmN0aW9uIGFkZFJvb20oKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2NvbXBvbmVudHNDaGFuZ2UnLCAnYWRkJyk7CiAgICB9LAogICAgLy8g6Lez6L2s5Yiw6K6+5aSH566h55CGCiAgICBwYWdlVG9EZXZpY2U6IGZ1bmN0aW9uIHBhZ2VUb0RldmljZShkYXRhKSB7CiAgICAgIHZhciBfdGhpczkgPSB0aGlzOwogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlOSgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBfdGhpczkuJHN0b3JlLmRpc3BhdGNoKCdzdG9yZS1tYW5hZ2Uvcm9vbS1tYW5hZ2Uvc2V0Um9vbURhdGEnLCBkYXRhKTsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIF90aGlzOS4kZW1pdCgnYmFjaycsICdkZXZpY2UnKTsKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU5KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g5oi/6Ze05pyN5YqhCiAgICBzZXJ2aWNlOiBmdW5jdGlvbiBzZXJ2aWNlKGRhdGEpIHsKICAgICAgdmFyIF90aGlzMTAgPSB0aGlzOwogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMTAoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBfdGhpczEwLiRzdG9yZS5kaXNwYXRjaCgnc3RvcmUtbWFuYWdlL3Jvb20tbWFuYWdlL3NldFJvb21EYXRhJywgZGF0YSk7CiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBfdGhpczEwLiRlbWl0KCdiYWNrJywgJ3NlcnZpY2UnKTsKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTApOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDmu6Hlh4/nrqHnkIYKICAgIG1hbkppYW46IGZ1bmN0aW9uIG1hbkppYW4oZGF0YSkgewogICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMSgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTExJChfY29udGV4dDExKSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDExLnByZXYgPSBfY29udGV4dDExLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTEuJHN0b3JlLmRpc3BhdGNoKCdzdG9yZS1tYW5hZ2Uvcm9vbS1tYW5hZ2Uvc2V0Um9vbURhdGEnLCBkYXRhKTsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIF90aGlzMTEuJGVtaXQoJ2JhY2snLCAnbWFuSmlhbicpOwogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOe8lui+keaIv+mXtAogICAgZWRpdFJvb206IGZ1bmN0aW9uIGVkaXRSb29tKGRhdGEpIHsKICAgICAgdmFyIF90aGlzMTIgPSB0aGlzOwogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMTIoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMiQoX2NvbnRleHQxMikgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxMi5wcmV2ID0gX2NvbnRleHQxMi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBfdGhpczEyLiRzdG9yZS5kaXNwYXRjaCgnc3RvcmUtbWFuYWdlL3Jvb20tbWFuYWdlL3NldFJvb21EYXRhJywgZGF0YSk7CiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBfdGhpczEyLiRlbWl0KCdjb21wb25lbnRzQ2hhbmdlJywgJ2VkaXQnKTsKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTIpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDliKDpmaTmiL/pl7QKICAgIGRlbFJvb206IGZ1bmN0aW9uIGRlbFJvb20ocm9vbV9pZCkgewogICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7CiAgICAgIHRoaXMuJGNvbmZpcm0oJ+WIoOmZpOWQju+8jOivpeaIv+mXtOaJgOacieiuvuWkh+OAgeWUrui0p+etieS/oeaBr+mDveWwhua4heepuu+8jOaCqOehruWumuimgeWIoOmZpOivpeaIv+mXtOWQlz8nLCAn5rip6aao5o+Q56S6JywgewogICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICB9KS50aGVuKCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMTMoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMyQoX2NvbnRleHQxMykgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxMy5wcmV2ID0gX2NvbnRleHQxMy5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBfZGVsUm9vbSh7CiAgICAgICAgICAgICAgICByb29tX2lkOiByb29tX2lkCiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBfdGhpczEzLiRtZXNzYWdlLnN1Y2Nlc3MoJ+WIoOmZpOaIkOWKnycpOwogICAgICAgICAgICAgICAgX3RoaXMxMy5NaXhfdGFibGVEYXRhLmN1cnJlbnRQYWdlID0gMTsKICAgICAgICAgICAgICAgIF90aGlzMTMuZ2V0Um9vbUxpc3QoKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTMpOwogICAgICB9KSkpLmNhdGNoKGZ1bmN0aW9uICgpIHt9KTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLmdldFJvb21MaXN0KCk7CiAgfQp9Ow=="},null]}