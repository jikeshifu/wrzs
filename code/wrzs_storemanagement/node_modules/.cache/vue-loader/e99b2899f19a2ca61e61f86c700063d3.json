{"remainingRequest":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\coding\\wrzs\\wrzs_storemanagement\\src\\views\\store-manage\\store-manage-edit.vue?vue&type=style&index=1&id=6d980862&lang=css&","dependencies":[{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\src\\views\\store-manage\\store-manage-edit.vue","mtime":1686935646984},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\css-loader\\dist\\cjs.js","mtime":1686936409521},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1686936410614},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\postcss-loader\\src\\index.js","mtime":1686936409992},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686936409160},{"path":"D:\\coding\\wrzs\\wrzs_storemanagement\\node_modules\\vue-loader\\lib\\index.js","mtime":1686936410308}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYW1hcC1zdWctcmVzdWx0IHsNCiAgei1pbmRleDogMTAwMDANCn0NCg=="},{"version":3,"sources":["store-manage-edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqXA;AACA;AACA","file":"store-manage-edit.vue","sourceRoot":"src/views/store-manage","sourcesContent":["<template>\r\n  <div class=\"store_manage-edit\">\r\n    <el-button @click=\"back\" icon=\"el-icon-back\">返回门店列表</el-button>\r\n    <el-row type=\"flex\" justify=\"center\">\r\n      <el-col :span=\"8\">\r\n        <el-form ref=\"form\" :model=\"form\" :rules=\"formRules\" label-width=\"120px\">\r\n          <el-form-item label=\"门店图片\" prop=\"store_image\">\r\n            <el-upload\r\n              :action=\"uploadURL\"\r\n              list-type=\"picture-card\"\r\n              :limit=\"1\"\r\n              :file-list=\"fileList\"\r\n              :before-upload=\"beforeUpload\"\r\n              :on-remove=\"removeUpload\"\r\n              :on-success=\"uploadSuccess\">\r\n              <i class=\"el-icon-plus\"></i>\r\n            </el-upload>\r\n            <el-tag type=\"warning\">仅限上传一张</el-tag>\r\n          </el-form-item>\r\n          <el-form-item label=\"门店名称\" prop=\"store_name\">\r\n            <el-input placeholder=\"请输入门店名称\" maxlength=\"100\" v-model=\"form.store_name\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"门店介绍\" prop=\"store_about\">\r\n            <el-input type=\"textarea\" v-model=\"form.store_about\" placeholder=\"说点什么吧...\" maxlength=\"100\" show-word-limit\r\n                      rows=\"4\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"门店类型\" prop=\"store_type\">\r\n            <el-radio-group v-model=\"form.store_type\">\r\n              <el-radio :label=\"1\">共享茶室</el-radio>\r\n              <!-- <el-radio :label=\"2\">舞社唱吧</el-radio> -->\r\n              <!-- <el-radio :label=\"3\">民宿公寓</el-radio> -->\r\n            </el-radio-group>\r\n          </el-form-item>\r\n          <el-form-item label=\"腾讯视频vid\" prop=\"vid\">\r\n            <el-input placeholder=\"腾讯视频vid(选填)\" v-model.trim=\"form.vid\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"门店标签\" prop=\"label\">\r\n            <el-input v-model=\"form.label\" maxlength=\"30\" placeholder=\"多个标签用|分隔,例如:舞蹈房|免费WiFi,最多显示5个\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"联系电话\" prop=\"contact\">\r\n            <el-input v-model=\"form.contact\" placeholder=\"请输入联系电话\" maxlength=\"20\"\r\n                      @input=\"form.contact = form.contact.replace(/[^\\d]/g,'')\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"详细地址\" prop=\"address\">\r\n            <el-input placeholder=\"请输入您门店的详细地址\" v-model=\"form.address\" type=\"textarea\" rows=\"4\"\r\n                      maxlength=\"100\"></el-input>\r\n            <el-button type=\"success\" icon=\"el-icon-location\" size=\"mini\" @click=\"showMapDialog\">定位查询</el-button>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button @click=\"back\">返回</el-button>\r\n            <el-button type=\"primary\" @click=\"submit\">立即修改</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </el-col>\r\n    </el-row>\r\n    <el-dialog\r\n      title=\"高德地图\"\r\n      :visible.sync=\"mapDialogObj.visible\"\r\n      :show-close=\"false\"\r\n      top=\"50px\"\r\n      width=\"50%\">\r\n      <el-input id=\"tipinput\" autocomplete=\"off\" class=\"dialog-input\" v-model=\"mapDialogObj.searchText\"\r\n                placeholder=\"请输入查询地址\" clearable @clear=\"clearDialogData\"></el-input>\r\n      <div id=\"map\" style=\"width:100%;height:500px\"></div>\r\n      <div class=\"dialog-ipt-group\">\r\n        <el-input :value=\"mapDialogObj.lat\" placeholder=\"纬度\" disabled></el-input>\r\n        <el-input :value=\"mapDialogObj.lon\" placeholder=\"经度\" disabled></el-input>\r\n        <el-input class=\"full\" :value=\"mapDialogObj.address\" placeholder=\"当前地址\" disabled></el-input>\r\n      </div>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"mapDialogClose\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"mapChooseSubmit\">确定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapState} from 'vuex'\r\nimport {editStore} from \"@/api/store-manage/store-manage\"\r\n\r\nexport default {\r\n  name: \"store-manage-edit\",\r\n  computed: {\r\n    ...mapState({\r\n      storeManage: state => state['store-manage/store-manage'].storeManage\r\n    })\r\n  },\r\n  data() {\r\n    // 验证空\r\n    const validateEmpty = (rule, value, callback) => {\r\n      if (!value.trim()) {\r\n        if (rule.field === 'store_name') {\r\n          callback(new Error('请输入门店名称'))\r\n        }\r\n        if (rule.field === 'address') {\r\n          callback(new Error('请输入门店详细地址'))\r\n        }\r\n      }\r\n      callback()\r\n    }\r\n    return {\r\n      form: {},\r\n      formRules: {\r\n        label: [{\r\n          required: true,\r\n          message: '请输入门店标签'\r\n        }],\r\n        store_image: [{\r\n          required: true,\r\n          message: '请上传门店主图'\r\n        }],\r\n        store_name: [{\r\n          required: true,\r\n          message: '请输入门店名称'\r\n        }, {\r\n          validator: validateEmpty\r\n        }],\r\n        contact: [{\r\n          required: true,\r\n          message: '请输入联系方式'\r\n        }],\r\n        address: [{\r\n          required: true,\r\n          message: '请输入门店详细地址'\r\n        }, {\r\n          validator: validateEmpty\r\n        }]\r\n      },\r\n      // 弹窗对象\r\n      mapDialogObj: {\r\n        visible: false,\r\n        searchText: '',\r\n        lat: '',\r\n        lon: '',\r\n        address: '',\r\n        MAP: null\r\n      },\r\n      fileList: []\r\n    }\r\n  },\r\n  methods: {\r\n    beforeUpload(file) { // 文件上传前钩子\r\n      const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png' //图片格式是否为png或jpg\r\n      const isLt10M = file.size / 1024 / 1024 < 10 //判断图片大小是否超过10MB\r\n      if (!isJpgOrPng) {\r\n        this.$message.error('文件格式错误！')\r\n      } else if(!isLt10M) {\r\n        this.$message.error('文件不能超过10M！')\r\n      } else {\r\n        const _this = this\r\n        return new Promise(resolve => {\r\n          const reader = new FileReader()\r\n          const image = new Image()\r\n          image.onload = (imageEvent) => {\r\n            const canvas = document.createElement('canvas');\r\n            const context = canvas.getContext('2d');\r\n            const originWidth = image.width\r\n            const originHeight = image.height\r\n            // 最大尺寸限制，可通过设置宽高来实现图片压缩程度\r\n            let maxWidth = 1125, maxHeight = 1125\r\n            // 目标尺寸\r\n            let targetWidth = originWidth, targetHeight = originHeight\r\n            // 图片尺寸超过800x800的限制\r\n            if (originWidth > maxWidth || originHeight > maxHeight) {\r\n              if (originWidth / originHeight > maxWidth / maxHeight) {\r\n                // 更宽，按照宽度限定尺寸\r\n                targetWidth = maxWidth;\r\n                targetHeight = Math.round(maxWidth * (originHeight / originWidth));\r\n              } else {\r\n                targetHeight = maxHeight;\r\n                targetWidth = Math.round(maxHeight * (originWidth / originHeight));\r\n              }\r\n            }\r\n            canvas.width = targetWidth\r\n            canvas.height = targetHeight\r\n            context.clearRect(0, 0, targetWidth, targetHeight)\r\n            context.drawImage(image, 0, 0, targetWidth, targetHeight)\r\n            const dataUrl = canvas.toDataURL('image/jpeg', 0.9)\r\n            const blobData = _this.dataURItoBlob(dataUrl, 'image/jpeg')\r\n            resolve(blobData)\r\n          }\r\n          reader.onload = (e => { image.src = e.target.result; })\r\n          reader.readAsDataURL(file)\r\n        })\r\n      }\r\n      return isJpgOrPng && isLt10M\r\n    },\r\n    dataURItoBlob(dataURI, type) {\r\n      var binary = atob(dataURI.split(',')[1]);\r\n      var array = [];\r\n      for(var i = 0; i < binary.length; i++) {\r\n        array.push(binary.charCodeAt(i));\r\n      }\r\n      return new Blob([new Uint8Array(array)], {type: type});\r\n    },\r\n    // 返回上一页\r\n    back() {\r\n      this.$emit('componentsChange', 'index')\r\n    },\r\n    // 提交\r\n    submit() {\r\n      this.$refs['form'].validate(async valid => {\r\n        if (valid) {\r\n          await editStore(this.form).then(() => {\r\n            this.$message.success('修改成功')\r\n            this.back()\r\n          })\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    // 上传图片成功的钩子\r\n    uploadSuccess(res) {\r\n      this.form.store_image = res.data\r\n    },\r\n    // 删除上传门店图片\r\n    removeUpload() {\r\n      this.form.store_image = ''\r\n    },\r\n    // 地图模糊查询实例\r\n    initMapFilterPlace() {\r\n      const auto = new AMap.Autocomplete({\r\n        input: 'tipinput'\r\n      })\r\n      // 构造地点查询类\r\n      const placeSearch = new AMap.PlaceSearch({\r\n        map: this.mapDialogObj.MAP\r\n      })\r\n      const geocoder = new AMap.Geocoder({\r\n        // city: \"010\", //城市设为北京，默认：“全国”\r\n        // radius: 1000 //范围，默认：500\r\n      })\r\n      // 注册监听，当选中某条记录时会触发\r\n      AMap.event.addListener(auto, \"select\", (e) => {\r\n        placeSearch.setCity(e.poi.adcode)\r\n        // 关键字查询查询\r\n        placeSearch.search(e.poi.name)\r\n        this.mapDialogObj.address = e.poi.district + e.poi.name\r\n        this.mapDialogObj.lat = e.poi.location.lat\r\n        this.mapDialogObj.lon = e.poi.location.lng\r\n        geocoder.getAddress(e.poi.location.lng + ',' + e.poi.location.lat, (status, result) => {\r\n          if (status === 'complete' && result.regeocode) {\r\n            this.form.province = result.regeocode.addressComponent.province\r\n            this.form.city = result.regeocode.addressComponent.city\r\n            this.form.district = result.regeocode.addressComponent.district\r\n          } else {\r\n            this.$message.error('根据经纬度查询地址失败')\r\n          }\r\n        })\r\n      })\r\n    },\r\n    // 地图标记查询实例\r\n    initMapMarkerPlace() {\r\n      let marker = null\r\n      let marker2 = null\r\n\r\n      const geocoder = new AMap.Geocoder({\r\n        // city: \"010\", //城市设为北京，默认：“全国”\r\n        // radius: 1000 //范围，默认：500\r\n      })\r\n\r\n      this.mapDialogObj.MAP.on('click', (e) => {\r\n        this.mapDialogObj.lon = e.lnglat.getLng()\r\n        this.mapDialogObj.lat = e.lnglat.getLat()\r\n        marker = new AMap.Marker({\r\n          position: [this.mapDialogObj.lon, this.mapDialogObj.lat]\r\n        })\r\n        if (marker2) {\r\n          this.mapDialogObj.MAP.remove(marker2)\r\n        }\r\n        marker2 = marker\r\n\r\n        marker.setMap(this.mapDialogObj.MAP)\r\n        geocoder.getAddress(e.lnglat.getLng() + ',' + e.lnglat.getLat(), (status, result) => {\r\n          if (status === 'complete' && result.regeocode) {\r\n            this.form.province = result.regeocode.addressComponent.province\r\n            this.form.city = result.regeocode.addressComponent.city\r\n            this.form.district = result.regeocode.addressComponent.district\r\n            this.mapDialogObj.address = result.regeocode.formattedAddress\r\n          } else {\r\n            this.$message.error('根据经纬度查询地址失败')\r\n          }\r\n        })\r\n      })\r\n    },\r\n    // 实例化地图\r\n    initMap() {\r\n      this.mapDialogObj.MAP = new AMap.Map('map', {\r\n        resizeEnable: true,\r\n        center: [106.630153, 26.647661],\r\n        zoom: 13\r\n      })\r\n      this.initMapFilterPlace()\r\n      this.initMapMarkerPlace()\r\n    },\r\n    // 地图弹窗\r\n    showMapDialog() {\r\n      this.mapDialogObj.visible = true\r\n      this.$nextTick(() => {\r\n        this.initMap()\r\n      })\r\n    },\r\n    // 关闭地图弹窗\r\n    mapDialogClose() {\r\n      this.mapDialogObj.visible = false\r\n      this.mapDialogObj.MAP.destroy()\r\n      this.mapDialogObj.searchText = ''\r\n      this.mapDialogObj.address = ''\r\n      this.mapDialogObj.lat = ''\r\n      this.mapDialogObj.lon = ''\r\n    },\r\n    // 地图选择完成\r\n    mapChooseSubmit() {\r\n      this.form.longitude = this.mapDialogObj.lon\r\n      this.form.latitude = this.mapDialogObj.lat\r\n      this.form.address = this.mapDialogObj.address\r\n      this.mapDialogClose()\r\n    },\r\n    // 清空地图查询数据\r\n    clearDialogData() {\r\n      this.mapDialogObj.address = ''\r\n      this.mapDialogObj.lat = ''\r\n      this.mapDialogObj.lon = ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.form = this.storeManage\r\n    this.fileList = [{\r\n      name: '',\r\n      url: this.baseUrl + this.form.store_image\r\n    }]\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n<style lang=\"scss\" scoped>\r\n::v-deep .el-textarea .el-input__count {\r\n  line-height: normal;\r\n}\r\n\r\n.amap-wrapper {\r\n  height: 500px;\r\n}\r\n\r\n.dialog-input {\r\n  width: 300px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.dialog-ipt-group {\r\n  margin-top: 20px;\r\n\r\n  .el-input {\r\n    width: 200px;\r\n  }\r\n\r\n  .el-input + .el-input {\r\n    margin-left: 10px;\r\n  }\r\n\r\n  .full {\r\n    display: block;\r\n    width: 100%;\r\n    margin-left: 0 !important;\r\n    margin-top: 20px;\r\n  }\r\n}\r\n</style>\r\n\r\n<style>\r\n.amap-sug-result {\r\n  z-index: 10000\r\n}\r\n</style>\r\n"]}]}